
BufferSizes attributes
^^^^^^^^^^^^^^^^^^^^^^

Various communication buffer sizes and can be specified using attributes of  :include-arg:`1` element node.

Please see sample :include-arg:`1` node and the table listing all available attributes below.

.. code-block:: none

   <BufferSizes DIEvent="1024" AIEvent="1024" DO="1" ASDUTx="253" />

:include-arg:`2`

.. field-list-table:: :include-arg:`3`
   :class: table table-condensed table-bordered longtable
   :spec: |C{0.20}|C{0.25}|S{0.55}|
   :header-rows: 1

   * :attr,10:  Attribute
     :val,15:   Values or range
     :desc,75:  Description
     
   * :attr:     :xmlref:`DIEvent`
     :val:      1...65535
     :desc:     DI event buffer size, number of entries. Communication protocol instances use designated buffers to store events before they are reported upstream. This prevents information loss in case of a communication failure. Oldest events are getting discarded to empty space for new events when buffer overflows. (default value 0 – automatic size) :inlinetip:`By default buffer size is automatically initialized twice the amount of configured DI objects, which is sufficient for most applications.`

   * :attr:     :xmlref:`AIEvent`
     :val:      1...65535
     :desc:     AI event buffer size, number of entries. Communication protocol instances use designated buffers to store events before they are reported upstream. This prevents information loss in case of a communication failure. Oldest events are getting discarded to empty space for new events when buffer overflows. (default value 0 – automatic size) :inlinetip:`By default buffer size is automatically initialized twice the amount of configured AI objects, which is sufficient for most applications.`

   * :attr:     :xmlref:`DO`
     :val:      1...255
     :desc:     Control command buffer size in entries. Communication protocol instances use designated buffer to hold received control commands until command execution is completed. It is possible to create a queue, where commands are executed sequentially one after another. Set :xmlref:`DO` greater than 1 in order to enable this feature. (default value 1; only one control command will be processed at a time. New command received before previous command execution is complete will be rejected)


